var fs = require('fs');
var path = require('path');
var Emitter = require('events').EventEmitter;

var Info = function(infoDir){
	var thisObject = this;
	this.reporter = new Emitter();
	
	fs.readdir(infoDir, function(err, files) {
		for (var i = 0; i < files.length; i++) {
			var file = files[i];
			switch (path.extname(file)) {
			
			// Load station identity from a config file with .id extension
			case '.id':
				thisObject.getIdentity(file);
				break;
				
			default:
				break;
			}
		}
	});
	
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//										FUNCTIONS DEFINITION
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// this is a general function to get a file and read its content as a JSON object
	var loadInfo = function(file, cb) {
		var info = {};
		fs.readFile(file, function(err, data) {
			if (err) {
				if(cb) return cb(err, info);
			}
			try {
				info = JSON.parse(data);
				if(cb) return cb(err, info);
			} catch (err) {
				if(cb) return cb(err, info);
			}
		});
	};
	

	// this function gets a file and reads its content as a JSON object for identity
	this.getIdentity = function(file, cb) {
		loadInfo(path.join(infoDir, file), function(err, info) {
			if (err) {
				thisObject.newErrorLog(err, 100101);
			} else {
				thisObject.validateIdentity(info, function(err) {
					if (err) {
						thisObject.newErrorLog(err, 100102);
					} else {
						thisObject.identity = info;
						thisObject.reporter.emit('identityLoaded',	thisObject.identity);
						if(cb) return cb(thisObject.identity);
					}
				});
			}
		});
	};

	this.setIdentity = function(input, cb) {
		try {
			input = JSON.parse(JSON.stringify(input));
			thisObject.validateIdentity(input, function(err) {
				if(err) {
					thisObject.newErrorLog(err, 100103);
					if(cb) return cb(err);
				} else {
					fs.readdir(infoDir, function(err, files) {
						if(err) {
							thisObject.newErrorLog(err, 100104);
							if(cb) return cb(err);
						}
						files = files.filter(function(file, i) {
							return path.extname(file) === '.id';
						});
						files.forEach(function(file, i) {
							try {
								fs.writeFile(path.join(infoDir, file), JSON.stringify(input), function(err) {
									thisObject.newErrorLog(err, 100105);
									if(cb) return cb(err);
								});
							} catch (err) {
								thisObject.newErrorLog(err, 100106);
								if(cb) return cb(err);
							}
						});
					});
				}
			});
		} catch (err) {
			thisObject.newErrorLog(err, 100107);
			if(cb) return cb(err);
		}
	};
	
	// this function gets an identity object and checks it for validating each property 
	this.validateIdentity = function(identity, cb) {
		var err = '';
		var pattern1,pattern2,pattern3;
		
		pattern1 = /[^a-zA-Z0-9\ ]+/g;
		pattern2 = /[a-zA-Z0-9\ ]{1,20}/g;
		pattern3 = /[a-zA-Z0-9\ ]{21,}/g;
		if(identity.name === undefined || pattern1.test(identity.name) || !pattern2.test(identity.name) || pattern3.test(identity.name)){
			err = err + 'the identity name should consist of alphanumeric and space characters. ';
		}

		pattern1 = /[^a-zA-Z0-9]+/g;
		pattern2 = /[a-zA-Z0-9]{4}/g;
		pattern3 = /[a-zA-Z0-9]{5,}/g;
		if(identity.code === undefined || pattern1.test(identity.code) || !pattern2.test(identity.code) || pattern3.test(identity.code)){
			err = err + 'the identity code should consist of exact 4 alphanumeric characters. ';
		}

		pattern1 = /[^0-9]+/g;
		pattern2 = /[0-9]{1,3}/g;
		pattern3 = /[0-9]{4,}/g;
		if(identity.number === undefined || pattern1.test(identity.number) || !pattern2.test(identity.number) || pattern3.test(identity.number)){
			err = err + 'the identity number should consist of exact 3 digit. ';
		}

		if(cb) return cb(err);
	};
	
	this.newErrorLog = function(msg, errorCode) {
		var errorLogFile = path.join(infoDir, 'error.log');
		var errorTime = new Date();
		errorTime = errorTime.toISOString();
		errorMsg = errorTime + '-' + errorCode + '-' + msg + '\n';
		fs.appendFile(errorLogFile, errorMsg, function(err) {
			if(err) throw err;
		});
	};
	
	
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//										PROPERTIES DEFINITION
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	

	
	thisObject.reporter.on('identityLoaded', function(identity) {
		console.log(identity);
	});
	
};





module.exports = function(infoDir) {
	var myInfo = new Info(infoDir);
	return myInfo;
};