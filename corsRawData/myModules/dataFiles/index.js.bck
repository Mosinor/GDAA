var fs = require('fs');
var path = require('path');
var process = require('child_process');

var serveStaticFiles = require('../serveStaticFiles');

var lsDataDir = function(dataDir, extension, myFn) {
	fs.readdir(dataDir, function(err, files) {
		if (!err) {
			var dataList = [];
			// only files with extension "extension" will be take into account
			files = files.filter(function(file, i) {
				return file.indexOf(extension) > 0;
			});
			
			if (files.length > 0) {
				files.forEach(function(file, i) {
					// console.log(file, i);
					fs.stat(path.join(dataDir, file), function(err, stats) {
						var dataFile = {
							name : file,
							date : stats.mtime.toUTCString().split(' ').slice(1, 4)
									.join('-'),
							size : (stats.size / 1024).toFixed(2)
						};
						dataList.push(dataFile);
						if (dataList.length == files.length) {
							return myFn(dataList);
						}
					});
				});
			} else {
				return myFn(dataList);
			}
		}
	});
};

var getDataFiles = function(dataDir, requestFiles, myFn) {
	var myCommand = "cd "+ dataDir + " && " + path.join(__dirname,'/shGetDataFiles');
	requestFiles.forEach(function(file, i) {
		// execute a shell script which convert all files to (RINEX and then)
		// compressed folder
		myCommand += " " + file.name;
	});
	//console.log(myCommand);
	process.exec(myCommand, function(error, stdout, stderr) {
		if(!error){
			//maybe there was some whitespace characters in stdout
			serveStaticFiles(path.join(dataDir, stdout), true, function(result) {
				console.log("salam::::",result.exists);
				return myFn(result, stdout);
			});
		}
	});

};

var getDirTotalSize = function(dataDir, extension, myFn) {

	lsDataDir(dataDir, extension, function(dataFiles) {
		var totalSize = 0;
		if (dataFiles.length > 0) {
			try {
				dataFiles.forEach(function(file, i) {
					totalSize += Number(file.size);
				});
				return myFn(null, totalSize.toFixed(2));
			} catch (err) {
				return myFn(err, null);
			}
		} else {
			return myFn(null, totalSize.toFixed(2));
		}
	});
};

module.exports = {
		lsDataDir  : lsDataDir,
		getDataFiles : getDataFiles,
		getDirTotalSize : getDirTotalSize
};